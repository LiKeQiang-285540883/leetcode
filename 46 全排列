/*方法1：
      回溯法：是一种通过探索所有可能的候选解来找出所有的解的算法。如果候选解被确认不是一个解（或者不是最后一个解）
             回溯法会通过再上一步进行一些变化抛弃该解，即回溯并且再次尝试。
             
      这里有一个回溯函数，使用第一个正数的索引作为参数backtrack(first)。
        1、如果第一个整数有索引n，意味着当前排列已完成。
        2、遍历索引first到索引n-1的所有整数
             * 在排列中防止第i个整数。即swap(nums[first],nums[i])；
             * 继续生成第i个整数开始的所有排列：backtrack(first+1);
             * 现在回溯，即通过swap(nums[first],nums[i])还原；
*/
//交换法求解
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        dfs(0, nums.size() - 1, nums);
        return result;
    }

private:
    vector<vector<int>> result;
    void dfs(int begin, int end, vector<int>& nums) {
        if (begin == end) {
            result.emplace_back(nums);
        }
        for (int i = begin; i <= end; i++) {
            swap(nums[i], nums[begin]);
            dfs(begin + 1, end, nums);
            swap(nums[i], nums[begin]);
        }
    }
};


//回溯法求解
class Solution {
public:
vector<vector<int> > result;
void func(vector<int> &nums,vector<int> &current, vector<bool>&nums1)
{
	if (current.size() == nums1.size())
		result.push_back(current);
	else
	{
		for (int i = 0; i < nums.size(); i++)
		{
			if (nums1[i])
			{
				current.push_back(nums[i]);
				nums1[i] = false;
				func(nums, current, nums1);
				nums1[i] = true;
				current.pop_back();
			}
		}
	}
}
vector<vector<int>> permute(vector<int>& nums) {
	if (nums.size() == 0)
		return {};
	else if (nums.size() == 1)
		return { {nums[0]} };
	else
	{
		vector<bool> nums1(nums.size(),true);
		vector<int> current;
		func(nums, current, nums1);
		return result;
	}
}
};
