/*方法一：
暴力法：对于数组中的每个元素，找出下雨后水能达到的最大高度，
       其的等于两边的最大高度的较小者减去当前高度的值
*/
/*复杂度为O（n^2）,每个元素都需要向左向右扫描
空间复杂度为O（1）的额外空间
*/
int trap(vector<int>& height)
{
   int ans;
   int size=height.size();
   for(int i =1.i<size-1;i++)//第i个元素
   {
       int max_left=0,max_right=0;
       for(int j = i,j>=0;j--)//向左扫描
       {
          max_left=max(max_left,height[j]);
       }
       for(int j=i;j<size;j++)//向右扫描
       {
         max_right=max(max_right,hegiht[j]);
       }
       ans+=min(max_left,max_right)-height[i];//接的雨水量
   }
   return ans;
}

/*方法2：
栈的应用：在遍历数组时维护一个栈，如果当前的条形块小于或等于栈顶的条形，我们将
         条形快的索性入栈，意思是当前的条形块被栈中的前一条形块界定。如果我们发现
         一个条形块长于栈顶，我们可以确定栈顶的条形块被当前条形块和栈的前一条形块界定，
         因此，我们可以弹出栈顶元素并累加答案到ans。
*/
/*时间复杂度为O（n）:单次遍历，每个条形块最多访问两次（入栈和出栈）都是O(1);
空间复杂度：O（n）：栈最多早阶梯型或平坦型条形块结构中占用O（n）空间
*/
int trap(vector<int>& height)
{
    int ans=0,current=0;
    stack<int> st;
    while(current<height.size())
    {
          while(!st.empty()&&height[current]>height[st.top])
          {
                int top=st.top();
                st.pop();
                if(st.empty())
                   break;
                int distance=current-st.top-1;
                int bounded_height=min(height[current],height[st.top()])-height[top];
                ans+=distance*bounded_height;
          }
          st.push[current++];
    }
    return ans;
  }

/*方法3：
双指针法：从动态编程方法的示意图中我们注意到，只要right_max[i]>left_max[i]（元素 0 到元素 6），
积水高度将由 left_max 决定，类似地left_max[i]>right_max[i]（元素 8 到元素 11）。
所以我们可以认为如果一端有更高的条形块（例如右端），积水的高度依赖于当前方向的高度（从左到右）。
当我们发现另一侧（右侧）的条形块高度不是最高的，我们则开始从相反的方向遍历（从右到左）。
我们必须在遍历时维护left_max和right_max，但是我们现在可以使用两个指针交替进行，实现 1 次遍历即可完成。
*/
int trap(vector<int>& height)
{
     int left=0,right=height.size()-1;
     int ans=0;
     int left_max=0,right=0;
     while(left<right)
     {
         if(height[left]<height[right])
         {
              height[left]>=left_max?(left_max=height[left]:ans+=left_max-height[left]);
              ++left;
         }
         else
         {
             height[right]>=right_max?(right_max=height[right]:ans+=right_max-height[right]);
             --right;
         }
     }
     return ans;
}
