方法一：深度优先搜索
主要思路：
1、基础的i，j两层循环数组，每次碰到 1 就开始dfs
2、因为题目假设二维矩阵的四个边缘都被水包围着，所以边界上一定是0，所以当这五种条件下都返回0

if(i<0 || i>=x || j<0 || j>=y || grid[i][j]==0) return 0
3、如果grid[i][j]==1那么，先将本次访问节点grid[i][j]置零，表示本节点已经被访问过
4、dfs遍历其上下左右四个节点

注意：
1、为了避免重复计数，访问过的点置零即可
2、dfs的每一层返回的是本身计数 1 + 上下左右 的dfs返回值
 
 class solution
 {
 public:
      int maxAreaOfIsIand(vector<vector<int>>& grid)
      {
          int res=0;
          for(int i=0;i<grid.size();i++)
          {
              for(int j=0;i<grid[i].size();j++)
              {
                  if(grid[i][j]==1)
                  {
                      res=max(res,dfs(i,j,grid));
                  }
              }
          }
          return res;
      }
     // 每次调用的时候默认num为1，进入后判断如果不是岛屿，则直接返回0，就可以避免预防错误的情况。
     // 每次找到岛屿，则直接把找到的岛屿改成0，这是传说中的沉岛思想，就是遇到岛屿就把他和周围的全部沉默。
     // ps：如果能用沉岛思想，那么自然可以用朋友圈思想。有兴趣的朋友可以去尝试。
      int dfs(int i,int j,vector<vector<int>>& grid)
      {
          if(i<0||j<0||i>=grid.size()||j>=grid[i].size()||grid[i][j]==0)
          {
              return 0;
          }
          int num=1;
          grid[i][j]==0;
          num+=dfs(i+1,j,grid);
          num+=dfs(i-1,j,grid);
          num+=dfs(i,j+1,grid);
          num+=dfs(i,j-1,grid);
          return num;
      }
 };

//方法二：深度优先搜索 + 栈
算法
我们可以用栈来实现深度优先搜索算法。这种方法本质与方法一相同，唯一的区别是：
方法一通过函数的调用来表示接下来想要遍历哪些土地，让下一层函数来访问这些土地。而方法二把接下来想要遍历的土地放在栈里，然后在取出这些土地的时候访问它们。
访问每一片土地时，我们将对围绕它四个方向进行探索，找到还未访问的土地，加入到栈 stack 中；
另外，只要栈 stack 不为空，就说明我们还有土地待访问，那么就从栈中取出一个元素并访问。

class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i = 0; i != grid.size(); ++i)
            for (int j = 0; j != grid[0].size(); ++j) {
                int cur = 0;
                //先入栈
                stack<int> stacki;
                stack<int> stackj;
                stacki.push(i);
                stackj.push(j);
                //在遍历
                while (!stacki.empty()) {
                    int cur_i = stacki.top(), cur_j = stackj.top();
                    stacki.pop();
                    stackj.pop();
                    if (cur_i < 0 || cur_j < 0 || cur_i == grid.size() || cur_j == grid[0].size() || grid[cur_i][cur_j] != 1)
                        continue;
                    //计算面积
                    ++cur;
                    grid[cur_i][cur_j] = 0;
                    int di[4] = {0, 0, 1, -1};
                    int dj[4] = {1, -1, 0, 0};
                    //循环遍历下一位置，并入栈
                    for (int index = 0; index != 4; ++index) {
                        int next_i = cur_i + di[index], next_j = cur_j + dj[index];
                        stacki.push(next_i);
                        stackj.push(next_j);
                    }
                }
                ans = max(ans, cur);
            }
        return ans;
    }
};

方法三：广度优先搜索
算法
我们把方法二中的栈改为队列，每次从队首取出土地，并将接下来想要遍历的土地放在队尾，就实现了广度优先搜索算法。

class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i = 0; i != grid.size(); ++i)
            for (int j = 0; j != grid[0].size(); ++j) {
                int cur = 0;
                //入队列
                queue<int> queuei;
                queue<int> queuej;
                queuei.push(i);
                queuej.push(j);
                //遍历队列
                while (!queuei.empty()) {
                //取队列头部
                    int cur_i = queuei.front(), cur_j = queuej.front();
                    queuei.pop();
                    queuej.pop();
                    if (cur_i < 0 || cur_j < 0 || cur_i == grid.size() || cur_j == grid[0].size() || grid[cur_i][cur_j] != 1)
                        continue;
                    //求面积
                    ++cur;
                    grid[cur_i][cur_j] = 0;
                    int di[4] = {0, 0, 1, -1};
                    int dj[4] = {1, -1, 0, 0};
                    //下一位置进队列
                    for (int index = 0; index != 4; ++index) {
                        int next_i = cur_i + di[index], next_j = cur_j + dj[index];
                        queuei.push(next_i);
                        queuej.push(next_j);
                    }
                }
                ans = max(ans, cur);
            }
        return ans;
    }
};
