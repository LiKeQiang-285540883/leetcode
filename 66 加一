/*根据题意加一，没错就是加一这很重要，因为它是只加一的所以有可能的情况就只有两种：
    除 99 之外的数字加一；
    数字 99。

    加一得十进一位个位数为 00 加法运算如不出现进位就运算结束了且进位只会是一。
    所以只需要判断有没有进位并模拟出它的进位方式，如十位数加 11 个位数置为 00，如此循环直到判断没有再进位就退出循环返回结果。
    然后还有一些特殊情况就是当出现 9999、999999 之类的数字时，循环到最后也需要进位，出现这种情况时需要手动将它进一位。
*/
class Solution {
    public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >= 0; i--) {
            digits[i]++;//末尾加一
            digits[i]%=10;//判断是否末尾是9，如果是的话，需要进位操作
            if(digits[i]!=0) return digits;//如果不是9，那么直接简单的加一就可以返回数组了
        }		//如果末位是9，那么就循环，往前一位继续加一，直到遇到不是9的那一位
        digits = new int [digits.length+1];//如果该数组所有位都是9
        digits[0]=1;//那么只需要将该数组初始化为新的数组，长度加一
        return digits;//并把零号元素初始化为一，其他元素会默认初始化为0
    }
}
/*解释：巧妙。只要+1求余数，余数不等于0，说明没有进位，直接返回。
        如果余数等于0，说明有进位，遍历前一个数字，加1再求余数，以此循环。
        如果for循环都遍历完了，说明最高位也有进位，则重新建立一个数组，
        初始化为0，将第一位设置为1就可以了，因为，99、999之类的数字加一为100、1000

//C++
/*class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {

        for(int i=digits.size()-1;i>=0;i--)
        {
            ++digits[i];//先加加，在使用

            if(digits[i]!=10)        //如果该位没有继续产生进位,则直接return 结果
                return digits;
            else
                digits[i]=0;        //进位
        }
        digits.insert(digits.begin(), 1);       //如果首位也产生进位,才会执行到这条语句，否则循环中已经return了
        return digits;
    }
};
*/
