/*思路二：动态规划
          我们令 dp[i][j] 是到达 i, j 最多路径
          动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]
          注意，对于第一行 dp[0][j]，或者第一列 dp[i][0]，由于都是在边界，所以只能为 1

          时间复杂度：O(m*n)O(m∗n)
          空间复杂度：O(m * n)O(m∗n)
*/
class Solution {
public: 
    int uniquePaths(int m, int n) {
        int dp[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) dp[i][j] = 1;
                else dp[i][j] = dp[i][j-1] + dp[i-1][j];
            }
        }
        return dp[m-1][n-1];
    }
};

/*空间压缩*/
class Solution {
public: 
    int uniquePaths(int m, int n) {
        int dp[n];
        for(int i= 0; i<n ;i++) dp[i]=1;
        for(int i = 1; i < m; i++)
            for(int j = 1; j < n; j++)  dp[j] = dp[j] + dp[j-1];
        return dp[n-1];  
    }
};
