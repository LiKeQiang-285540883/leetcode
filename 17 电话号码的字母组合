//给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。
//给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

//方法1  使用循环产生深度搜索
class Solution {
public:
    string chars[8]={"abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    vector<string> letterCombinations(string digits) {
        if(digits.empty()) return vector<string> ();

        vector<string> state(1,"");//每次循环以后拼接的字符串
        for(auto u:digits)//循环每个字符数字
        {
            vector<string> now;
            for(auto c:chars[u-'2'])//循环每个数字对应的字符串  因为从2开始  因此减去偏移量‘2’
            {
                for(auto s:state)//对获得的状态循环
                now.push_back(s+c);//拼接字符串
            }
            state=now;
        }
        return state;
    }
};
//方法二  应用队列的形式
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;//用于存放结果
        //映射map哈希表
        map<char,string> m={{'2',"abc"},{'3',"def"},{'4',"ghi"},{'5',"jkl"},{'6',"mno"},{'7',"pqrs"},{'8',"tuv"},{'9',"wxyz"}};

        int size=digits.size();//数字对应的字符串个数
        queue<string> que;//定义队列
        //先将第一个数字对应的字符串入队
        //m[digits[0]].size()表示digits[0]数字对的字符串的长度   单个字符串的长度
        for(int j=0;j<m[digits[0]].size();j++)
        {
            string str;//存放字符串
            str.push_back(m[digits[0]][j]);//将char型的字符串转化为string型
            que.push(str);//string型的字符串入队
        }
        string s;//用于存放队头元素
        for(int i=1;i<size;i++)
        {
            int length=que.size();//当前队列的长度，即当前入队字符串的长度
            while(length--)
            {
                //m[digits[i]].size()表示数字i对应的字符串的长度
                for(int j=0;j<m[digits[i]].size();j++)
                {
                    s=que.front();
                    s=s+m[digits[i]][j];//队头元素加上新元素
                    que.push(s);//入队
                }
                //当前队头对应的元素已经全部入队
                que.pop();//队头出队
            }
        }
        while(!que.empty())
        {
            res.push_back(que.front());//队头元素存储到res
            que.pop();//队头出队
        } 
        return res;//返回
    }
};

class Solution {
public:
    //1. 用map记录每个数字按键对应的所有字母
    map<char, string> M = {
        {'2', "abc"}, {'3', "def"}, {'4', "ghi"}, {'5', "jkl"}, {'6', "mno"},
        {'7', "pqrs"}, {'8', "tuv"}, {'9', "wxyz"}
    };
    //2. 存储最终结果和临时结果的变量
    vector<string> ans;
    string current;

    //3. DFS函数，index是生成临时结果字串的下标，
    //每一个digits[index]数字对应临时结果current[index]的一位字母
    void DFS(int index, string digits) {
        //出口
        if(index == digits.size()) {
            ans.push_back(current);
            return;
        }
        //递归调用
        //对于当前输入的第index号数字(digits[index])，
        //枚举其对应的所有字母(M[digits[index]][i])
        for(int i = 0; i < M[digits[index]].size(); i++) {
            current.push_back(M[digits[index]][i]);     //临时结果压入一个字母
            DFS(index + 1, digits);         //以在当前位置压入该字母这一“情况”为前提，构造此“分支”的后续结果
            current.pop_back();             //状态还原，例如临时结果从 "ab" -> "a"，下一次循环尝试"ac" 
        }
    }

    vector<string> letterCombinations(string digits) {
        if(digits.size() == 0) {
            return ans;
        }
        DFS(0, digits);
        return ans;
    }
};
