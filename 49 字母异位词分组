/*方法1：排序数组分类 
   思路：当且仅当他们的排序字符串相等时，两个字符串是字母异位词
        维护一个映射ans：{string-->list},其中每个键K是一个排序字符串，
                        每一个值是初始输入的字符串列表，排序后等于K。
   时间复杂度：O(NKlogK),其中N是strs的长度，而K是strs中字符串的最大长度。
              当遍历每一个字符串时，外部循环具有的复杂度为O（N），然后在
              O(KlogK)的时间内对每个字符串排序。
   空间复杂度：O(NK)，排序存储在ans中的全部信息内容。
*/
class solution
{
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs)
    {
        unordered_map<string,vector<string>> dic;
        for(auto &s:strs)
        {
            string key=s;//暂存保留一份
            sort(key.begin(),key.end());//排序分类
            dic[key].push_back(s);//将字符串s添加到对应的类key中，保存在dic中
        }
        
        vvector<vector<string>> res;//存储最后结果
        for(auto &kv:dic)//遍历排好的dic
        {
            res.push_back(kv.second);//将排好的dic中类key对应的字符串s存储在res中。
        }
    }
};
/*方法2：按计数分类
   思路：当且仅当他们的字符计数（每个字符的出现次数）相同时，两个字符串是字母异位词
   算法：可以将每一个字符串S转换为字符数count，由26个非负整数组成，表示a,b,c的数量等使用这些计数作为哈希映射的基础
        在Java中，我们的字符数count的散列化表示将是一个用**#**字符分离的字符串。
        eg:abbccc将表示为#1#2#3#0#0....#0，其中总共26个条目
        在Python中，{1，2，3，0，0，...，0}
*/
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs.length == 0) return new ArrayList();
        Map<String, List> ans = new HashMap<String, List>();
        int[] count = new int[26];
        for (String s : strs) {
            Arrays.fill(count, 0);
            for (char c : s.toCharArray()) count[c - 'a']++;

            StringBuilder sb = new StringBuilder("");
            for (int i = 0; i < 26; i++) {
                sb.append('#');
                sb.append(count[i]);
            }
            String key = sb.toString();
            if (!ans.containsKey(key)) ans.put(key, new ArrayList());
            ans.get(key).add(s);
        }
        return new ArrayList(ans.values());
    }
}


