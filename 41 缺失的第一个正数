//置换法：
  如果数组中包含x属于[1~N],那么恢复后数组的第x-1个元素为x;
  在恢复后，数组应当有 [1, 2, ..., N] 的形式，但其中有若干个位置上的数是错误的，每一个错误的位置就代表了一个缺失的正数。
  以题目中的示例二 [3, 4, -1, 1] 为例，恢复后的数组应当为 [1, -1, 3, 4]，我们就可以知道缺失的数为 2。

那么我们如何将数组进行恢复呢？我们可以对数组进行一次遍历，对于遍历到的数 x=nums[i]，
如果x∈[1,N]，我们就知道 x 应当出现在数组中的 x - 1的位置，因此交换 nums[i] 和 nums[x−1]，
这样 x 就出现在了正确的位置。在完成交换后，新的nums[i] 可能还在[1,N] 的范围内，我们需要继续进行交换操作，直到 x 不属于 [1,N]。

注意到上面的方法可能会陷入死循环。如果 nums[i] 恰好与nums[x−1] 相等，
那么就会无限交换下去。此时我们有nums[i]=x=nums[x−1]，
说明 x 已经出现在了正确的位置。因此我们可以跳出循环，开始遍历下一个数。

由于每次的交换操作都会使得某一个数交换到正确的位置，因此交换的次数最多为 N，整个方法的时间复杂度为 O(N)。
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            while(nums[i]>0&&nums[i]<n&&nums[nums[i]-1]!=nums[i])
            {
                swap(nums[nums[i]-1],nums[i]);
            }
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=i+1)
            return i+1;
        }
        return n+1;
   }
};
//哈希表
循环遍历数组：思路是获得当前位置i时的最小正整数值
步骤：
  1、初值化最小正整数res=1
  2、开始遍历，在位置i时，先将当前值存入哈希表中，判断当前最小整数值res是否与nums[j]相等
     若相等时，则做res+1迭代知道res不在哈希表中，最终输出res
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
       int res=1;
       unordered_map<int,int> map1;
       for(int i=0;i<nums.size();i++)
       {
          map1[nums[i]]=i;
          if(nums[i]==res)
          {
              while(map1.find(res)!=map1.end())
              {
                  res+=1;
              }
          }
       }
       return res;
   }
};
