扫描线法

使用扫描线，从左至右扫过。如果遇到左端点，将高度入堆，如果遇到右端点，则将高度从堆中删除。使用 last 变量记录上一个转折点。
class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        multiset<pair<int, int>> all;
        vector<vector<int>> res;
        
        for (auto& e : buildings) {
            all.insert(make_pair(e[0], -e[2])); // critical point, left corner
            all.insert(make_pair(e[1], e[2])); // critical point, right corner
        }
        
        multiset<int> heights({0}); // 保存当前位置所有高度。
        vector<int> last = {0, 0}; // 保存上一个位置的横坐标以及高度
        for (auto& p : all) {
            if (p.second < 0) heights.insert(-p.second); // 左端点，高度入堆
            else heights.erase(heights.find(p.second)); // 右端点，移除高度
            
            // 当前关键点，最大高度
            auto maxHeight = *heights.rbegin();
            
            // 当前最大高度如果不同于上一个高度，说明这是一个转折点
            if (last[1] != maxHeight) {
                // 更新 last，并加入结果集
                last[0] = p.first;
                last[1] = maxHeight;
                res.push_back(last);
            }
        }
        return res;
    }
};



class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
       vector<vector<int>> res;
       multiset<pair<int,int>> all;

       for(auto& e :buildings)//将矩形的左右坐标分别放入multiset中，左高为负，右高位正
       {
           all.insert(make_pair(e[0],-e[2]));
           all.insert(make_pair(e[1],e[2]));
       }

       multiset<int> heights({0});
       vector<int> last={0,0};
       for(auto& p:all)//遍历每个矩形的左右顶点，
       {
           if(p.second<0) heights.insert(-p.second);//左顶点放入heights中
           else heights.erase(heights.find(p.second));//右顶点删除

           auto maxheight=*heights.rbegin();

           if(last[1]!=maxheight)//求出关键点
           {
               last[0]=p.first;
               last[1]=maxheight;
               res.push_back(last);
           }
       }
       return res;
    }
};
