方法1：按行排序
  思路：从左往右迭代字符串，可以轻松的确定字符串位于Z字形图案的哪一行。
  算法：使用min(numRows,len(s))个列表来表示Z字形图案中的非空行。
        从左往右迭代字符串s，将每个字符串添加到合适的行，可以使用当前行和当前方向这两个变量对合适的行进行跟踪。
        只有当向上移动到最上面的行或者向下移动到最下面的行时，当前方向才会发生改变。
  时间复杂度：O(N),N=LEN(S)
  空间复杂度：O(N);
class Solution {
public:
	string convert(string s, int numRows) {

		if (numRows == 1) return s;

		vector<string> rows(min(numRows, int(s.size()))); // 防止s的长度小于行数
		int curRow = 0;
		bool goingDown = false;

		for (char c : s) {
			rows[curRow] += c;
			if (curRow == 0 || curRow == numRows - 1) {// 当前行curRow为0或numRows -1时，箭头发生反向转折
				goingDown = !goingDown;
			}
			curRow += goingDown ? 1 : -1;
		}
		string ret;
		for (string row : rows) {// 从上到下遍历行
			ret += row;
		}
		return ret;
	}
};

方法2：按行遍历
  每一行字母的所有下标起始都是有规则的
  0.起始下标都是行号
  1.第0层和第numRows-1层的下标间距总是step = numRows * 2 - 2;
  2.中间层的下标间距总是step-2*行数，2*行数交替出现;
  3.下标不能超过len(s)-1;
  
class solution
{
public:
   	string convert(string s, int numRows) {
		if (numRows == 1) return s;

		int step = numRows * 2 - 2; // 间距
		int index = 0;// 记录s的下标
		int len = s.length();
		int add = 0; // 真实的间距
		string ret;
		for (int i = 0; i < numRows; i++) // i表示行号
		{
			index = i;//当前行号
			add = i * 2;
			while (index < len)//超出字符串长度计算下一层
			{
				ret += s[index]; // 当前行的第一个字母
				add = step - add;// 第一次间距是step -2*i，第二次是2*i, 
				index += (i == 0 || i == numRows-1) ? step : add; // 0行和最后一行使用step间距，其余使用add间距
			}
		}
		return ret;
	}
};
        
