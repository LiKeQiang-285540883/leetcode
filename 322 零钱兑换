1、最优子结构：
回到凑零钱问题， 为什么说它符合最优⼦结构呢？ ⽐如你想求 amount =11 时的最少硬币数（原问题） ， 如果你知道凑出 amount = 10 的最少硬币
数（⼦问题） ， 你只需要把⼦问题的答案加⼀（再选⼀枚⾯值为 1 的硬币）就是原问题的答案， 因为硬币的数量是没有限制的， ⼦问题之间没有相互
制， 是互相独⽴的。

2、先确定「状态」 ，
也就是原问题和⼦问题中变化的变量。 由于硬币数量无限， 所以唯一的状态就是目标金额 amount 。

3、然后确定 dp 函数的定义： 当前的目标金额是 n ， 至少需要 dp(n) 个硬币凑出该金额。

4、然后确定「选择」 并择优， 也就是对于每个状态， 可以做出什么选择改变当前状态。 具体到这个问题， 无论当的目标金额是多少， 选择就是从金额列表
coins 中选择一个硬币， 然后目标金额就会减少：

5、最后明确 base case， 显然目标金额为 0 时， 所需硬币数量为 0； 当目标金额等于 0 时， 无解， 返回 -1：

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
    // 数组大小为 amount + 1，初始值也为 amount + 1
    vector<int> dp(amount + 1, amount + 1);
    // base case
    dp[0] = 0;
    // 外层 for 循环在遍历所有状态的所有取值
    for (int i = 0; i < dp.size(); i++) {
        // 内层 for 循环在求所有选择的最小值
        for (int coin : coins) {
            // 子问题无解，跳过
            if (i - coin < 0) continue;
            dp[i] = min(dp[i], 1 + dp[i - coin]);//原问题的解等于界问题的解+1；
        }
    }
    return (dp[amount] == amount + 1) ? -1 : dp[amount];
   }
};
