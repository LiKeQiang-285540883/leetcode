/*方法四：单调栈
        维护一个栈，一开始把-1放入栈中来表示开始，初始化时，按照从左到右的顺序，不断的将柱子的序号
        放入栈中，直到遇到相邻主子呈下降关系，也就是heights[i-1]>heights[i]。然后开始将栈中的序号弹出
        直到遇到stack[j]满足heights[stack[j]]=<heights[i]。每次弹出下标时，用弹出的元素作为高，形成
        的最大面积的宽是当前元素与stack[top-1]之间的那些柱子。也就是弹出stack[top]时，记当前元素在原数组
        中的下标为i，当前弹出元素为高的最大矩形面积为：
                                        heights[stack[top]]*(i-stack[top-1]-1)
        精髓在于：栈中存储的是heights的序号，也就是索引下标，这些序号对应到heights中值为依次递增，
                 这个很关键，而且这个-1作为赋值很精髓。
*/
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {        
        stack<int> st;
        heights.push_back(0);
        int size = heights.size();
        int res = 0;
        for (int i = 0; i < size; ++i) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                int val = st.top();
                st.pop();
                res = max(res, heights[val] * (st.empty() ? i : (i - st.top() - 1)));
            }
            st.push(i);
        }
        return res;
    }
};
/*深度解析单调栈*/
这是一个非常典型的利用单调栈来解决 顺序和大小综合问题的题。
单调栈特别适合解决那些，两头大小决定中间值的大小的题。

因为单调栈中，以单调增栈为例。
设栈顶元素为 b， 栈顶第二个元素为a，自然有 a < b （因为堆栈越往上越大）
这时候， 若c出现，且c小于b， 那么b的左右第一个比b小的两个元素就找到了，分别是a和c，b在中间最大。
这时候你可以处理b，并重新整理堆栈，使其保持递增。
若c大于b，那c入栈，继续循环就行了。
最后清理堆栈

单调栈的结构：
for i int list
    while i is not empty and stack[-1]>i;//先调整位置
         stack.pop();
    stack.append(i);//当前元素无论如何也要放进去，不同的是需不需要pop来调整
    
这个题的关键点在于：
以B点为高的矩形的最大宽度为， a-c， 其中a，c分别为B左边和右边第一个小于B的元素。
单调栈的特点在于：
当遇见大数的时候， 压入堆栈，等待之后处理。
当遇见小数的时候，意味着大数的右边界c已经确定了。
这时候开始pop， 而以被pop出来的值为高度的矩形的左右边界需要被确定。
其右边界就是当前的小数。即为c。左边界是堆栈下一层的元素，因为下一层的元素一定比当前小。且是第一小的元素。这时候a也确定了。
则以被pop出来的数为高度的矩形是 (c - a - 1) * pop()

这里细节需要注意的是，

栈底要垫上-1，表示栈底。
循环结束，要清理堆栈。此时所有堆栈中继续存放的元素的又边界c都是结尾len(height)-1
python：
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        stack = [-1]
        max_res = 0
        for i in range(len(heights)):
            while len(stack) > 1 and heights[i] <= heights[stack[-1]]:
                max_res = max(max_res, heights[stack.pop()] * (i - stack[-1] - 1))  
            stack.append(i)
        for i in range(len(stack)-1):max_res = max(max_res, heights[stack.pop()]*(len(heights)-1-stack[-1]))
        return max_res
