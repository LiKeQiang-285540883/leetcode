
/*
First, check the four border of the matrix. If there is a element is
'O', alter it and all its nei***or 'O' elements to '1'.

Then ,alter all the 'O' to 'X'

At last,alter all the '1' to 'O'

For example:

         X X X X           X X X X             X X X X
         X X O X  ->       X X O X    ->       X X X X
         X O X X           X 1 X X             X O X X
         X O X X           X 1 X X             X O X X
*/

DFS
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.size()==0){
            return;
        }
        int rows=board.size(),cols=board[0].size();
        for(int i=0;i<rows;i++){
            dfs(board,i,0);
            dfs(board,i,cols-1);
        }
        for(int j=1;j<cols-1;j++){
            dfs(board,0,j);
            dfs(board,rows-1,j);
        }
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(board[i][j]=='1'){
                    board[i][j]='O';
                }
                else{
                    board[i][j]='X';
                }
            }
        }
    }
private:
    void dfs(vector<vector<char>>& board,int i,int j){
        if(i>=0&&i<board.size()&&j>=0&&j<board[0].size()&&board[i][j]=='O'){
            board[i][j]='1';
            dfs(board,i-1,j);
            dfs(board,i+1,j);
            dfs(board,i,j-1);
            dfs(board,i,j+1);
        }
    }
};

BFS
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.empty())
            return;
        int row = board.size();
        int col = board[0].size();
        int dirs[4][2]={{-1,0},{1,0},{0,-1},{0,1}};
        queue<pair<int,int>> q;
        for(int i = 0;i<row;i++){
            if(board[i][0] == 'O')
                q.push({i,0});
            if(board[i][col-1] == 'O')
                q.push({i,col-1});
        }
        for(int i = 0;i<col;i++){
            if(board[0][i] == 'O')
                q.push({0,i});
            if(board[row-1][i] == 'O')
                q.push({row-1,i});
        }
        //vector<vector<int>> visit(row,vector<int>(col,0));
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            board[x][y] = 'A';
            q.pop();
            for(int d = 0;d<4;d++){
                int xi = x + dirs[d][0];
                int yi = y + dirs[d][1];
                if(xi >= 0 && xi < row && yi >= 0 && yi < col){
                    if(board[xi][yi] == 'O'){
                        board[xi][yi] = 'A';
                        q.push({xi,yi});
                    }
                }
            }
        }

        for(int i = 0;i<row;i++){
            for(int j = 0;j<col;j++){
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
                else if(board[i][j] == 'A')
                    board[i][j] = 'O';
            }
        }
        return;
    }
};

