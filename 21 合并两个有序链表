class solution{
 public://递归法
    ListNode* mergeTwoLists(ListNode* l1,ListNode* l2)
    {
       if(!l1)
       return l2;
       if(!l2)
       return l1;
       
       if(l1->val<l2->val)
       {
          l1->next=mergeTwoLists(l1->next,l2);
          return l1;
       }
       else
       {
          l2->next=mergeTwoLists(l1,l2->next);
          return l2;
       }
       return 0;
    }
};

class solution{
 public://迭代法
    ListNode* mergeTwoLists(ListNode* l1,ListNode* l2)
    {
      ListNode* head =new ListNode(0);//新建哨兵节点 方便操作 设定一个哨兵节点 "prehead" ，这可以在最后让我们比较容易地返回合并后的链表
      ListNode* temp=head;
      
      while(l1&&l2)//依次比较两个链表的节点值，将值较小的接地那插入到新建的链表的后面
      {
         if(l2->val<=l1->val)
         {
           temp->next=l2;
           temp=temp->next;
           l2=l2->next;
         }
         else
         {
           temp->next=l1;
           temp=temp->next;
           l1=l1->next;
         }      
      }
      // 其中一个链表比较完毕，将另外一个链表剩余结点直接插入到新建的链表后面
      if(l1)
      {
         temp->next=l1;
      }
      else
      {
         temp->next=l2;
      }
      temp=head;
      head=head->next;// 删除哨兵结点
      delete(temp);
      
      return head;
    }
};
