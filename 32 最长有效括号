class Solution {
public:
    int longestValidParentheses(string s) {
       int size=s.length();
       vector<int> dp(size,0);
       
       int maxval=0;
       for(int i=1;i<size;i++)
       {
       if(s[i]==')')
       {
          if(s[i-1]=='(')
          {
              dp[i]=2;
              if(i-2>=0)
              {
                 dp[i]=dp[i]+dp[i-2];
              }
          }
          else if(dp[i-1]>0)
          {
              if((i-dp[i-1]-1)>=0&&s[i-dp[i-1]-1]=='(')
              {
                  dp[i]=dp[i-1]+2;
                  if((i-dp[i-1]-2)>=0)
                  {
                      dp[i]=dp[i]+dp[i-dp[i-1]-2];
                  }
              }
          }
       }
       maxval=max(maxval,dp[i]);       
   }
   return maxval;
   }
   
};

//栈
class Solution {
public:
    int longestValidParentheses(string s) {
        int maxans=0;
        stack<int> stk;
        stk.push(-1);
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='(')//将下标入栈
            {
                stk.push(i);
            }
            else{
                stk.pop();
                if(stk.empty())
                {
                    stk.push(i);
                }
                else
                {
                    maxans=max(maxans,i-stk.top());//当前下标减去栈顶元素
                }
            }
        }
        return maxans;
    }
};
