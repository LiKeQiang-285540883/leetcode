扫描法（垂直）：
i表示每个字符串对应的同一个索引，j表示对应第几个字符串,只有所有元素都是共有的才能执行完循环到最后一步，即可返回任意的字符串
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
          if(strs.size()==0) return "";
          for(int i=0;i<strs[0].size();i++)
          {
              for(int j=1;j<strs.size();j++)
              {
                    if(strs[j][i]!=strs[0][i])
                        return strs[0].substr(0,i);
              //substr取前i个元素，因为终止循环的索引i对应的是第i+1个元素不是共有的,所以前i个元素是共有前缀
              }
          }
          return strs[0];
    }
};

C++横向扫描法
  先假设strs[0]为公共前缀，之后遍历strs.size()-1的字符串，判断是否含有prefix，
  如果不含有prefix，则将prefix长度减1，再次判断prefix-1是否为其子串（==0表示含有该字串），
  直到prefix为空。
class Solution {
public:
   string longestCommonPrefix(vector<string>& strs) {
		if (strs.size() == 0) return "";//strs无字符串，则为空
		string prefix = strs[0];//假设第一个字符串为公共前缀
		for (int i=1;i<strs.size();i++)//判断每一个字符串中是否含有prefix，
		{
			while (strs[i].find(prefix)!=0)//如果不含有prefix，则将prefix长度减1，再次判断prefix-1是否为其子串（==0表示含有该字串），直到prefix为空，
			{
				if (prefix == "") return "";//如果prefix为空串，则说明公共前缀为空
				prefix = prefix.substr(0, prefix.length() - 1);
			}
		}
		return prefix;
	}
};
