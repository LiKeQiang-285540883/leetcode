/*定义：如果我们可以从数组中的某一个位置跳到最后的位置，就称这个位置是“好坐标”，否则称为“坏坐标”，
        因此问题可以简化为第0个位置是不是“号坐标”。
  题解：通常解决并理解动态规划问题需要以下4个步骤：
        1、利用递归回溯解决问题
        2、利用记忆表优化（自顶向下的动态规划）
        3、移除递归的部分（自底向上的动态规划）
        4、使用技巧减少时间和空间复杂度
  方法1：回溯法
         模拟从第一个位置跳到最后位置的所有方案。从第一个位置开始，模拟所有可以跳到的位置，
         然后重复上述操作，当没有办法继续跳的时候，就回溯。
*/
class solution
{
public:
       bool res=false;
       vecto<int> flag;
       bool canJump(vector<int>& nums)
       {
            int len=ms.size();
            vector<int> flag_1(len,0);
            flag=flag_1;
            dfs(nums,0,len);
            return res;
       }
       void dfs(vector<int>& nums,int now,int len)
       {
            if(now>len) return ;
            if(now=len-1)
            {
                res=true;
                return;
            }
            for(int i=nums[now];i>=1;i--)
            {
                if(now+i>=len||flag[now+i]==1) continue;
                flag[now+i]=1;
                dfs(nums,now+i,len);
            }
       }
};
/*方法2：自顶向上的动态规划
        自顶向下的动态规划可以理解成回溯法的一种优化。我们发现当一个坐标已经被确定为
        好 / 坏之后，结果就不会改变了，这意味着我们可以记录这个结果，每次不用重新计算。

        因此，对于数组中的每个位置，我们记录当前坐标是好 / 坏，记录在数组 memo 中，
        定义元素取值为 GOOD ，BAD，UNKNOWN。这种方法被称为记忆化。
算法:
    1、初始化 memo 的所有元素为 UNKNOWN，除了最后一个显然是 GOOD （自己一定可以跳到自己）
    2、优化递归算法，每步回溯前先检查这个位置是否计算过（当前值为：GOOD / BAD）
           1、如果已知直接返回结果 True / False
           2、否则按照之前的回溯步骤计算
    3、计算完毕后，将结果存入memo表中       
*/
enum Index {
    GOOD, BAD, UNKNOWN
}

public class Solution {
    Index[] memo;

    public boolean canJumpFromPosition(int position, int[] nums) {
        if (memo[position] != Index.UNKNOWN) {
            return memo[position] == Index.GOOD ? true : false;
        }

        int furthestJump = Math.min(position + nums[position], nums.length - 1);
        for (int nextPosition = position + 1; nextPosition <= furthestJump; nextPosition++) {
            if (canJumpFromPosition(nextPosition, nums)) {
                memo[position] = Index.GOOD;
                return true;
            }
        }

        memo[position] = Index.BAD;
        return false;
    }

    public boolean canJump(int[] nums) {
        memo = new Index[nums.length];
        for (int i = 0; i < memo.length; i++) {
            memo[i] = Index.UNKNOWN;
        }
        memo[memo.length - 1] = Index.GOOD;
        return canJumpFromPosition(0, nums);
    }
}
/*解题思路,挨着一个个的跳
1、如果某一个作为起跳点的格子可以跳跃的距离为3，那么表示后面3个格子都可以作为起跳点。
2、可以对每一个能作为起跳点的格子都尝试跳一次，把能跳到最远的距离不断更新。
3、如果可以一直跳到最后，就成功了。
*/
bool canJump(vector<int>& nums)
{
    int k=0;
    //跳完结束，
    for(int i=0;i<nums.size();i++)
    {
    //若数组长度大于跳的最远距离，则返回false；
         if(i>k) return false;
         k=max(k,i+nums[i]);
    }
    return true;
}
