二叉搜索树
    二叉搜索树（Binary Search Tree）是指一棵空树或具有如下性质的二叉树：
          若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值
          若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值
          任意节点的左、右子树也分别为二叉搜索树
          没有键值相等的节点
二叉搜索树的中序遍历结果为递增序列

解题思路
1、固定一个start和end变量，取mid作为root节点。
2、递归得到root的左子树root的右子树。
3、注意这里的边界情况，包括左边界，不包括右边界。
class solution
{
public:
      TreeNode* DFS(vector<int>& nums,int start,int end)
      {
          if(start==end)
          {
              return nullptr;
          }
        int mid=(start+end)>>1;
        TreeNode* root = new TreeNode(nums[mid]);
        root->left=DFS(nums,0,mid);
        root->right=DFS(nums,mid+1,end);
        return root;
      }
      
      TreeNode* sortArrayToBST(vector<int>& nums)
      {
          return DFS(nums,0,nums.size());
      }
};
