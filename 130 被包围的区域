注意到题目解释中提到：
  任何边界上的 O 都不会被填充为 X。 我们可以想到，所有的不被包围的 O 都直接或间接与边界上的 O 相连。我们可以利用这个性质判断 O 是否在边界上，具体地说：
  1、对于每一个边界上的O，我们以它为起点，标记所有与它有直接或间接相连的字母O；
  2、最后遍历这个矩阵，对于每一个字母：
     如果该字母标记过，则该字母为没有被字母X包围的字母O，将其还原为O;
     如果该字母标没有记过，则该字母为被字母X包围的字母O，将其修改为X;
     
     //深度优先搜索
class Solution {
public:
    int n, m;

    void dfs(vector<vector<char>>& board, int x, int y) {
        if (x < 0 || x >= n || y < 0 || y >= m || board[x][y] != 'O') {
            return;
        }
        board[x][y] = 'A';
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }

    void solve(vector<vector<char>>& board) {
        n = board.size();
        if (n == 0) {
            return;
        }
        m = board[0].size();
        for (int i = 0; i < n; i++) {
            dfs(board, i, 0);
            dfs(board, i, m - 1);
        }
        for (int i = 1; i < m - 1; i++) {
            dfs(board, 0, i);
            dfs(board, n - 1, i);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'A') {
                    board[i][j] = 'O';
                } else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
};
复杂度分析
时间复杂度：O(n×m)，其中 n 和 m 分别为矩阵的行数和列数。深度优先搜索过程中，每一个点至多只会被标记一次。
空间复杂度：O(n×m)，其中 n 和 m 分别为矩阵的行数和列数。主要为深度优先搜索的栈的开销。


/广度优先搜索
class solution{
public:
   void solve(vector<vector<char>>& board)
   {
        if(board.empty()) return ;
        int n=board.size();
        int m=board[0].size();
        
        queue<pair<int,int>> q;
        int dirs={{-1,0},{1,0},{0,1},{0,-1}};
        
        for(int i=0;i<n;i++)
        {
            if(board[i][0]=='O')
                q.push({i,0});
            if(board[i][m-1]=='O')
                q.push({i,m-1});
        }
        for(int j=1;i<m-1;i++)
        {
            if(board[0][j]=='O')
                q.push({0,j});
            if(board[n-1][0]=='O')
                q.push({n-1,j});
        }
        
        while(!q.empty())
        {
            int x=q.front().first;
            int y=q.front().second();
            board[x][y]='A';
            q.pop();
            
            for(int i=0;i<4;i++)
            {
                int xi=x+dirs[i][0];
                int yi=y+dirs[i][1];
                if(xi>=0&&yi>=0&&xi<n&&yi<m)
                {
                    if(board[xi][yi]=='O')
                    {
                       board[xi][yi]=='A';
                       q.push({xi,yi});
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'A') {
                    board[i][j] = 'O';
                } else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
       }
   }
};
