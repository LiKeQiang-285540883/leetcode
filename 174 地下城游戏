动态规划：
从右下向左上进行遍历
令 dp[i][j] 表示从坐标 (i,j) 到终点所需的最小初始值。换句话说，当我们到达坐标 (i,j) 时，如果此时我们的路径和不小于 dp[i][j]，我们就能到达终点。
这样一来，我们就无需担心路径和的问题，只需要关注最小初始值。对于 dp[i][j]，我们只要关心 dp[i][j+1] 和 dp[i+1][j] 的最小值minn。记当前格子的值为 dungeon(i,j)，
那么在坐标 (i,j) 的初始值只要达到minn−dungeon(i,j) 即可。同时，初始值还必须大于等于 1。这样我们就可以得到状态转移方程：
dp[i][j]=max(min(dp[i+1][j],dp[i][j+1])−dungeon(i,j),1)

最终答案即为 dp[0][0]。

边界条件为，当 i=n-1 或者 j=m-1 时，dp[i][j] 转移需要用到的 dp[i][j+1] 和 dp[i+1][j] 中有无效值，因此代码实现中给无效值赋值为极大值。
特别地，dp[n-1][m-1]转移需要用到的 dp[n−1][m] 和dp[n][m−1] 均为无效值，因此我们给这两个值赋值为 1。

为什么正着推就会受之前所选路径的影响，而反着推就不会受到之前路径的影响呢？
答：我们的子问题是“从i,j到达终点需要的最小生命值”，它依赖于从i,j右下侧的路径；动态规划类似于数学归纳，我们需要找到base situation，
    对于我们要求的问题，就是从右下角开始（即在公主处我们需要的答案是确定的），所以是从右下到左上递推。如果从左上开始推，我们并不是基于已知解的，
    相当于在做一次DFS完全搜索，自然需要记录所有中间状态（到达每个点的最小值与到达每个点剩余的生命值）。

class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size(),n=dungeon[0].size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,INT_MAX));
        dp[m-1][n]=dp[m][n-1]=1;
        for(int i=m-1;i>=0;i--)
        {
            for(int j=n-1;j>=0;j--)
            {
                int minn=min(dp[i+1][j],dp[i][j+1]);
                dp[i][j]=max(minn-dungeon[i][j],1);
            }
        }
        return dp[0][0];
    }
};
