/*动态规划:
          该问题可以被分解为一些包含最优子结构的子问题，即它的最优解可以从其子问题的最优解来有效的
          构建，因此可以使用动态规划来解决这一问题。
*/
/*时间复杂度：O(n), 单循环到n。
空间复杂度：O(n), dp数组用了n的空间。
*/
class solution
{
public：
       int climbStairs(int n)
       {
            int* dp=new int[n+2];
            dp[1]=1;
            dp[2]=2;
            for(int i=3;i<=n;i++)
            {
                dp[i]=dp[i-1]+dp[i-2];
            }
            return dp[n];
       }
};

/*斐波那契数：
    在上述方法中，我们使用 dpdp 数组，其中 dp[i]=dp[i-1]+dp[i-2]。
    可以很容易通过分析得出dp[i] 其实就是第 i 个斐波那契数: Fib(n)=Fib(n−1)+Fib(n−2)。 
    其实就是对前面的dp数组进行优化，因为我们只需要dp[n]的数据。
*/
/*  时间复杂度：O(n), 单循环到n。
    空间复杂度：O(1), 使用常量级空间。
*/
class solution
{
public:
      int climbStairs(int n)
      {
          int first=1;
          int second=1;
          for(int i=2;i<=n;i++)
          {
               int third=first+second;
               first=second;
               second=third;
          }
          return second;
      }
};
