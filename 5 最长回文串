中心扩展法
  使用中心扩展法需要理解以下几点：
  对于一个回文串，它有一个中心，该中心可以为一个字符，也可以只是两个字符之间的间隙。
  找到中心后向左右同时进行扩展，并且左右两边的字符应该对应相等。

对于该题我们可以从字符串的左边第一个字符开始，首先以第一个字符作为中心，
求出对应回文串的长度len1，再以它右边的间隙为中心，求出对应回文串的长度len2，
以此类推知道遍历完整个数组为止，便可得到最长的回文子串了。

class Solution {
public:
  string longestPalindrome(string s) 
	{
      if(s.size()<1)
      {
          return "";
      }
      int start=0,end=0;
      for(int i=0;i<s.size();i++)
      {
          int len1=expandAroundCenter(s,i,i);
          int len1=expandAroundCenter(s,i,i+1);
          
          int len=max(len1,len2);
          if(len>end-start)
          {
              start=i-(len-1)/2;
              end=i+len/2;
          }
      }
      return s.substr(start,end-start+1);
	}
	int expandAroundCenter(string s, int left, int right)
	{
		  int L=left,R=right;
      while(L>0&&R<s.size()&&s[L]==s[R])
      {
          L--;
          R++;
      }
      return R-L-1;
	}
};
//
动态规划
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n));
        string ans;
        for (int l = 0; l < n; ++l) {
            for (int i = 0; i + l < n; ++i) {
                int j = i + l;
                if (l == 0) {
                    dp[i][j] = 1;
                }
                else if (l == 1) {
                    dp[i][j] = (s[i] == s[j]);
                }
                else {
                    dp[i][j] = (s[i] == s[j] && dp[i + 1][j - 1]);
                }
                if (dp[i][j] && l + 1 > ans.size()) {
                    ans = s.substr(i, l + 1);
                }
            }
        }
        return ans;
    }
};
