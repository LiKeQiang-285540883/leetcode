中心扩展法
  使用中心扩展法需要理解以下几点：
  对于一个回文串，它有一个中心，该中心可以为一个字符，也可以只是两个字符之间的间隙。
  找到中心后向左右同时进行扩展，并且左右两边的字符应该对应相等。

对于该题我们可以从字符串的左边第一个字符开始，首先以第一个字符作为中心，
求出对应回文串的长度len1，再以它右边的间隙为中心，求出对应回文串的长度len2，
以此类推知道遍历完整个数组为止，便可得到最长的回文子串了。

class Solution {
public:
  string longestPalindrome(string s) 
	{
      if(s.size()<1)
      {
          return "";
      }
      int start=0,end=0;
      for(int i=0;i<s.size();i++)
      {
          int len1=expandAroundCenter(s,i,i);
          int len1=expandAroundCenter(s,i,i+1);
          
          int len=max(len1,len2);
          if(len>end-start)
          {
              start=i-(len-1)/2;
              end=i+len/2;
          }
      }
      return s.substr(start,end-start+1);
	}
	int expandAroundCenter(string s, int left, int right)
	{
		  int L=left,R=right;
      while(L>0&&R<s.size()&&s[L]==s[R])
      {
          L--;
          R++;
      }
      return R-L-1;
	}
};
//
动态规划
使用动态规划解决此问题的步骤：
定义一个二维数组bool dp[len-1][len-1]来记录遍历字符串所得的状态，
dp[l][r]为true表示从l到r的子串为回文串，false表示不是回文串
初始化二维数组，单个字符为回文串，所以定义dp[i][i] = true
找到状态转移方程，dp[l][r] = (s[r]==s[l] && (r-l==1 || dp[l+1][r-1])) ? true : false
class Solution {
public:
    string longestPalindrome(string s) {
     int len=s.size();
     if(len==0)
     return s;
     bool dp[len][len];
     int start=0,end=0;
     for(int i=0;i<len;i++)
        dp[i][i]=true;
     for(int i=1;i<len;i++)
     {
        for(int l=0;l<r;l++)
        {
            if(s[r]==s[l]&&(r-l==1||dp[l+1][r-1]))
            {
                dp[l][r]=true;
                if(r-1>end-start)
                {
                    start=l;
                    end=r;
                }
                continue;
            }
            else
            {
                dp[l][r]=false;
            }            
        }
     }
     return s.substr(start,end-start+1);
    }
};
