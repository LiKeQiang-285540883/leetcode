传统二分法模板
// 重点是左闭右开的思想
template <class T>
int lower_bound(vector<T> &arr){
    int left = 0, right = arr.size();
    while(left < right){
        int mid = left + (right-left)/2;
        if(/*mid处的元素比预计的要靠左*/){
            left = mid+1;
        }else{
            right = mid;
        }
    }
    return left;
}
所以我们此处i比预计要靠左的条件是什么呢？
假设原数组为nums1[0...m] nums2[0...n]
现在被我们分成了
// 注：同样是左闭右开，即nums1[0:i]的最后一个元素是nums1[i-1]
nums1[0:i]  nums1[i:m]
nums2[0:j]  nums2[j:n]
由于数组的有序性，我们总是有
nums1[i-1] <= nums1[i]
nums2[j-1] <= nums2[j]
然后理想条件下我们将获得（即左半部分数组的集合总是 <= 右半部分数组的集合）
nums1[i-1] <= nums1[i] && nums1[i-1] <= nums2[j]
nums2[j-1] <= nums2[j] && nums2[j-1] <= nums1[i]
不理想条件下，考虑nums2[j-1]>nums1[i]是什么情况？说明了什么？
说明了此时我们选择的这个i，但是使得nums[j-1]太大了，j必须得左移才能使得nums[j-1]减小，减小到保证nums2[j-1] <= nums1[i]的地步
-- 既然j要往左，那么i就要往右咯 -- 所以nums2[j-1]>nums1[i]就是使得i右移的条件，即left = mid+1

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int len1=nums1.size();
        int len2=nums2.size();
        if (len1>len2) {//统一考虑短数组
            swap(nums1,nums2);
            swap(len1,len2);
        }
        int k=(len1+len2+1)/2;//均分数组长度，用来控制另一个数组分割点位置
        int left=0,right=len1;//对短数组进行二分查找全局中位点
        int m1,m2;
        double c1,c2;
        while(left<right){
            m1=(right+left)/2;//表示m1左边有m1个元素
            m2=k-m1;//表示m2左边有m2个元素，全局中位点左边元素个数是总数的一半
            //由于四个子数组要保证能组成总数组中位点的左右部分
            //因此，必须保证短数组左边子数组最大值，要大于长数组的分割左邻点
            if(nums1[m1]<nums2[m2-1])
                left=m1+1;
            else
                right=m1;
        }
        m1=(left+right)/2;
        m2=k-m1;
        c1=max( (m1>0)?nums1[m1-1]:INT_MIN,
            (m2>0)?nums2[m2-1]:INT_MIN );
        if((len1+len2)%2==1) return c1;
        c2=min((m1<len1)?nums1[m1]:INT_MAX,
            (m2<len2)?nums2[m2]:INT_MAX);
        return (c1+c2)/2;
    }
};


class Solution {
public:
    int findKthElm(vector<int>& nums1,vector<int>& nums2,int k){
        assert(1<=k&&k<=nums1.size()+nums2.size());//相当于判断语句
        int le=max(0,int(k-nums2.size())),ri=min(k,int(nums1.size()));
        while(le<ri){
            int m=le+(ri-le)/2;
            if(nums2[k-m-1]>nums1[m]) le=m+1;
            else ri=m;
        }//循环结束时的位置le即为所求位置，第k小即为max(nums1[le-1]),nums2[k-le-1])，但是由于le可以为0、k,所以
        //le-1或者k-le-1可能不存在所以下面单独判断下
        int nums1LeftMax=le==0?INT_MIN:nums1[le-1];
        int nums2LeftMax=le==k?INT_MIN:nums2[k-le-1];
        return max(nums1LeftMax,nums2LeftMax);
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size()+nums2.size();
        if(n&1){//两个数组长度和为奇数
            return findKthElm(nums1,nums2,(n>>1)+1);
        }
        else{//为偶数
            return (findKthElm(nums1,nums2,n>>1)+findKthElm(nums1,nums2,(n>>1)+1))/2.0;
        }
    }
};


