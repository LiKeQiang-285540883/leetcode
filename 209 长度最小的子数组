方法一：
  暴力法：初始化子数组在最小长度为无穷大，枚举数组nums中的每个下标作为子数组的开始下标，对于每个开始下标i，
          需要找到大于或等于i的最小下标j，使得从从nums[i]到nums[j]的元素和大于或等于s，并更新子数组的最小
          长度（此时数组长度是j-i+1）;
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        int res=INT_MAX;
        for(int i=0;i<n;i++)
        {
            int sun=0;
            for(int j=i;j<n;j++)
            {
                sum+=nums[j];
                if(sum>=s)
                {
                  res=min(res,j-i+1);
                  break;
                }
            }
        }
        return res==INT_MAX?0:res;
    }
};
//方法二：前缀和+二分查找
    方法一的时间复杂度是 O(n^2)，因为在确定每个子数组的开始下标后，找到长度最小的子数组需要 O(n) 的时间。如果使用二分查找，则可以将时间优化到O(logn)。
   为了使用二分查找，需要额外创建一个数组sums 用于存储数组nums 的前缀和，其中sums[i] 表示从nums[0] 到 nums[i−1] 的元素和。得到前缀和之后，
   对于每个开始下标 i，可通过二分查找得到大于或等于 i 的最小下标bound，使得 nums[bound]−sums[i−1]≥s，并更新子数组的最小长度（此时子数组的长度是 bound−(i−1)）。
   因为这道题保证了数组中每个元素都为正，所以前缀和一定是递增的，这一点保证了二分的正确性。如果题目没有说明数组中每个元素都为正，这里就不能使用二分来查找这个位置了。
   
   时间复杂度：O(nlogn)，其中 n 是数组的长度。需要遍历每个下标作为子数组的开始下标，遍历的时间复杂度是O(n)，对于每个开始下标，
   需要通过二分查找得到长度最小的子数组，二分查找得时间复杂度是 O(logn)，因此总时间复杂度是 O(nlogn)。
   空间复杂度：O(n)，其中 n 是数组的长度。额外创建数组 sums 存储前缀和。

class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        int ans=INT_MAX;
        vector<int>sums(n+1,0);
        for(int i=1;i<=n;i++)
        {
            sums[i]=sums[i-1]+nums[i-1];
        }
        for(int i=1;i<=n;i++)
        {
          int target=s+sums[i-1];
          auto bound=lower_bound(sums.begin(),sums.end(),target);
          if(bound!=sums.end())
          {
              ans=min(ans,static_cast<int>(bound-dums.begin())-(i-1)));
          }
        }
        return ans==INT_MAX?0:ans;
    }
};



//方法三：为了降低时间复杂度可以使用双指针的方法
    双指针法：定义两个指针start 和 end 分别表示子数组的开始位置和结束位置，维护变量sum 存储子数组中的元素和（即从 nums[start] 到nums[end] 的元素和）。
   初始状态下，start 和 end 都指向下标 0，sum 的值为 0。
   每一轮迭代，将nums[end] 加到sum，如果 sum≥s，则更新子数组的最小长度（此时子数组的长度是 end−start+1），然后将 nums[start] 从sum 中减去并将start 右移，
   直到 sum<s，在此过程中同样更新子数组的最小长度。在每一轮迭代的最后，将 end 右移。

    时间复杂度为：O(n)其中 n 是数组的长度。指针start 和end 最多各移动 n 次。
    空间复杂度为：O(1)
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
       int n=nums.size();
       if(n==0) return 0;
       int start=0,end=0;
       int sum=0;
       int res=INT_MAX;
       while(end<n)
       {
          sum+=nums[end];
          while(sum>=s)
          {
              res=min(res,end-start+1);
              sum-=nums[start];
              start++;
          }
          end++;
       }
       return res==INT_MAX?0：res;
    }
};
